# CMake version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)

# Build type debug
IF(NOT MSVC)
  SET(CMAKE_BUILD_TYPE Debug)
  # Build option release
  SET(CMAKE_C_FLAGS_RELEASE "-Wall -O2")
  # Build option debug
  SET(CMAKE_C_FLAGS_DEBUG "-W -g")
ELSE()
  ADD_DEFINITIONS("/W3 /D_CRT_SECURE_NO_WARNINGS /wd4005 /wd4996 /nologo")
ENDIF()

# Project name
PROJECT(livereload-c)
# Project version
# SET(_VERSION "1.0.0")

# CMake ExternalProject module
INCLUDE(ExternalProject)

# jansson
FIND_PATH(JANSSON_INCLUDES
  jansson.h PATHS /usr/include /usr/include/jansson)

FIND_LIBRARY(JANSSON_LIBRARIES
  NAMES libjansson jansson PATHS /usr/lib64 /usr/lib)

IF(JANSSON_INCLUDES STREQUAL "JANSSON_INCLUDES-NOTFOUND" OR
    JANSSON_LIBRARIES STREQUAL "JANSSON_LIBRARIES-NOTFOUND")
  ExternalProject_ADD(
    jansson
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/third_party/jansson
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/deps
    )
  SET(JANSSON_INCLUDES ${CMAKE_CURRENT_BINARY_DIR}/deps/include)
  IF(NOT MSVC)
    SET(JANSSON_LIBRARIES ${CMAKE_CURRENT_BINARY_DIR}/deps/lib/libjansson.a)
  ELSE()
    SET(JANSSON_LIBRARIES ${CMAKE_CURRENT_BINARY_DIR}/deps/lib/jansson.lib)
  ENDIF()
ENDIF()

INCLUDE_DIRECTORIES(${JANSSON_INCLUDES})
SET(JANSSON_LIBS "${JANSSON_LIBRARIES}")

# inotifytools
IF(NOT WIN32)
  FIND_PATH(INOTIFYTOOLS_INCLUDES
    inotify.h PATHS /usr/include /usr/include/inotifytools)

  FIND_LIBRARY(INOTIFYTOOLS_LIBRARIES
    NAMES libinotifytools inotifytools
    PATHS /usr/lib64 /usr/lib)

  IF(NOT INOTIFYTOOLS_INCLUDES STREQUAL "INOTIFYTOOLS_INCLUDES-NOTFOUND" AND
      NOT INOTIFYTOOLS_LIBRARIES STREQUAL "INOTIFYTOOLS_LIBRARIES-NOTFOUND")
    INCLUDE_DIRECTORIES(${INOTIFYTOOLS_INCLUDES})
    SET(INOTIFYTOOLS_LIBS "${INOTIFYTOOLS_LIBRARIES}")
    ADD_DEFINITIONS(-DHAVE_WATCH)
    SET(WATCH_SOURCES src/watcher_inotify.c)
  ENDIF()
ELSE()
  ADD_DEFINITIONS(-DHAVE_WATCH)
  SET(WATCH_SOURCES src/watcher_win32.c)
ENDIF()

# libwebsockets
IF(NOT MSVC)
  FIND_PATH(WEBSOCKETS_INCLUDES
    libwebsockets.h
    PATHS ${WEBSOCKETS_INCLUDE_PATH} /usr/include)

  FIND_LIBRARY(WEBSOCKETS_LIBRARIES
    NAMES libwebsockets websockets
    PATHS ${WEBSOCKETS_LIBRARY_PATH} /usr/lib64 /usr/lib)

  IF(WEBSOCKETS_INCLUDES STREQUAL "WEBSOCKETS_INCLUDES-NOTFOUND")
    MESSAGE(FATAL_ERROR "libwebsockets could not found libwebsockets.h\n"
      "OPTION: -DWEBSOCKETS_INCLUDE_PATH=path")
  ENDIF()

  IF(WEBSOCKETS_LIBRARIES STREQUAL "WEBSOCKETS_LIBRARIES-NOTFOUND")
    MESSAGE(FATAL_ERROR "libwebsockets could not found libwebsockets.so\n"
      "OPTION: -DWEBSOCKETS_LIBRARY_PATH=path")
  ENDIF()
ELSE()
  SET(WEBSOCKETS_INCLUDES ${CMAKE_SOURCE_DIR}/third_party/libwebsockets/include)
  SET(WEBSOCKETS_LIBRARIES ${CMAKE_SOURCE_DIR}/third_party/libwebsockets/lib/websockets.lib)
ENDIF()

INCLUDE_DIRECTORIES(${WEBSOCKETS_INCLUDES})
SET(WEBSOCKETS_LIBS "${WEBSOCKETS_LIBRARIES}")

# source
SET(SERVER_SOURCES src/server.c)
SET(CLIENT_SOURCES src/client.c)
SET(FILTER_SOURCES src/filter.c)

IF(NOT WIN32)
  SET(CLIENT_SOURCES ${CLIENT_SOURCES} ${WATCH_SOURCES})
ELSE()
  SET(WIN32_SOURCE
    src/win32/getopt_long.c src/win32/strcasestr.c src/win32/strncasecmp.c)
  SET(SERVER_SOURCES ${SERVER_SOURCES} ${WIN32_SOURCE})
  SET(CLIENT_SOURCES ${CLIENT_SOURCES} ${WATCH_SOURCES} ${WIN32_SOURCE})
  SET(FILTER_SOURCES ${FILTER_SOURCES} ${WIN32_SOURCE})
ENDIF()

# execute
ADD_EXECUTABLE(livereload-server ${SERVER_SOURCES})
TARGET_LINK_LIBRARIES(
  livereload-server ${WEBSOCKETS_LIBS} ${JANSSON_LIBS})

ADD_EXECUTABLE(livereload-client ${CLIENT_SOURCES})
TARGET_LINK_LIBRARIES(
  livereload-client ${WEBSOCKETS_LIBS} ${JANSSON_LIBS} ${INOTIFYTOOLS_LIBS})

ADD_EXECUTABLE(livereload-filter ${FILTER_SOURCES})
TARGET_LINK_LIBRARIES(livereload-filter)


# install
INSTALL_PROGRAMS(/bin FILES
  ${CMAKE_CURRENT_BINARY_DIR}/livereload-server
  ${CMAKE_CURRENT_BINARY_DIR}/livereload-client
  ${CMAKE_CURRENT_BINARY_DIR}/livereload-filter)
